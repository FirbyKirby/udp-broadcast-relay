name: Publish Docker image (multi-arch)

on:
  push:
    tags: [ "v*" ]
  workflow_dispatch:

concurrency:
  group: docker-publish-${{ github.ref }}
  cancel-in-progress: false

jobs:
  test:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test image
        uses: docker/build-push-action@v6
        with:
          context: .
          load: true
          tags: udp-broadcast-relay-redux:test-${{ github.sha }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Make test script executable
        run: chmod +x build-and-test.sh

      - name: Run test script
        run: TEST_IMAGE=udp-broadcast-relay-redux:test-${{ github.sha }} ./build-and-test.sh

      - name: Run Trivy vulnerability scan
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'image'
          image-ref: 'udp-broadcast-relay-redux:test-${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'
          exit-code: 0

      - name: Upload SARIF results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-results.sarif
          category: container-scan

      - name: Generate human-readable Trivy report
        if: always()
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: udp-broadcast-relay-redux:test-${{ github.sha }}
          format: 'table'
          output: 'trivy-report.txt'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'

      - name: Upload Trivy scan report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-scan-report
          path: trivy-report.txt
          retention-days: 30

      - name: Upload test logs on failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: test-logs
          path: |
            *.log
          retention-days: 7

  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    if: |
      github.event_name == 'workflow_dispatch' ||
      (startsWith(github.ref, 'refs/tags/v') && needs.test.result == 'success')
    permissions:
      contents: read
      packages: write
      security-events: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU (arm64 emulation)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker Hub login
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: docker.io/firbykirby/udp-broadcast-relay
          tags: |
            type=raw,value=latest
            type=semver,pattern=v{{version}}

      - name: Build and push (multi-arch)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          sbom: false
          provenance: false
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy scan on published image
        uses: aquasecurity/trivy-action@0.28.0
        if: always()
        with:
          scan-type: 'image'
          image-ref: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          format: 'sarif'
          output: 'trivy-published.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: 0

      - name: Upload published image SARIF results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-published.sarif
          category: published-image-scan

  create-release:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate release notes
        id: release-notes
        run: |
          # Get the previous tag for comparison
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          CURRENT_TAG=${GITHUB_REF#refs/tags/}

          if [ -z "$PREVIOUS_TAG" ]; then
            # First release
            echo "notes<<EOF" >> $GITHUB_OUTPUT
            echo "## What's New" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "Initial release of UDP Broadcast Relay." >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "### Features" >> $GITHUB_OUTPUT
            git log --pretty=format:"%s" --reverse | head -20 | sed 's/^/- /' >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            # Generate changelog from commits since previous tag
            echo "notes<<EOF" >> $GITHUB_OUTPUT
            echo "## What's Changed" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            git log --pretty=format:"%s" ${PREVIOUS_TAG}..HEAD | sed 's/^/- /' >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "**Full Changelog**: https://github.com/${GITHUB_REPOSITORY}/compare/${PREVIOUS_TAG}...${CURRENT_TAG}" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: ${{ steps.release-notes.outputs.notes }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  sync-readme:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: success() && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    timeout-minutes: 5
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log sync attempt
        run: |
          echo "::group::README Sync Information"
          echo "Workflow: ${{ github.workflow }}"
          echo "Event: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "SHA: ${{ github.sha }}"
          echo "Repository: firbykirby/udp-broadcast-relay"
          echo "README file: ./README.md"
          echo "::endgroup::"

      - name: Sync README to Docker Hub
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: firbykirby/udp-broadcast-relay
          readme-filepath: ./README.md
          short-description: 'UDP broadcast relay for Docker - relay UDP broadcasts across VLANs/subnets with mDNS support'

      - name: Log sync success
        if: success()
        run: |
          echo "::notice::README successfully synchronized to Docker Hub"
          echo "Docker Hub repository: https://hub.docker.com/r/firbykirby/udp-broadcast-relay"

      - name: Log sync failure
        if: failure()
        run: |
          echo "::error::Failed to synchronize README to Docker Hub"
          echo "::error::Check the following:"
          echo "::error::1. DOCKERHUB_USERNAME and DOCKERHUB_TOKEN secrets are correctly configured"
          echo "::error::2. Docker Hub repository 'firbykirby/udp-broadcast-relay' exists and is accessible"
          echo "::error::3. README.md file exists and is readable"
          echo "::error::4. Docker Hub API is operational (check https://status.docker.com)"
          echo "::error::Manual retry: Use workflow_dispatch to retry without rebuilding images"

      - name: Generate job summary
        if: always()
        run: |
          echo "## README Sync Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ **Status:** Success" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The README.md has been successfully synchronized to Docker Hub." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Docker Hub Repository:** [firbykirby/udp-broadcast-relay](https://hub.docker.com/r/firbykirby/udp-broadcast-relay)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Status:** Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Failed to synchronize README to Docker Hub. See error logs above for details." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Troubleshooting:**" >> $GITHUB_STEP_SUMMARY
            echo "- Verify Docker Hub credentials are valid" >> $GITHUB_STEP_SUMMARY
            echo "- Check Docker Hub API status" >> $GITHUB_STEP_SUMMARY
            echo "- Retry using workflow_dispatch trigger" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow Details:**" >> $GITHUB_STEP_SUMMARY
          echo "- Event: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- Ref: ${{ github.ref }}" >> $GITHUB_STEP_SUMMARY
          echo "- SHA: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
