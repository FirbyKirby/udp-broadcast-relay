version: '3.8'

services:
  # HDHomerun tuner discovery relay
  # Relays UDP broadcasts on port 65001 between VLANs
  hdhomerun-relay:
    image: your-registry/udp-broadcast-relay-redux:latest
    network_mode: host
    cap_add:
      - NET_ADMIN
      - NET_RAW
    environment:
      - RELAY_ID=1
      - BROADCAST_PORT=65001
      - INTERFACES=br0.10,br0.20,br0.30
      - DEBUG=false
      - TZ=UTC
      - PUID=99
      - PGID=100
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pgrep", "udp-broadcast-relay-redux"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

  # Roku device discovery relay
  # Relays SSDP multicast broadcasts on port 1900 between VLANs
  roku-relay:
    image: your-registry/udp-broadcast-relay-redux:latest
    network_mode: host
    cap_add:
      - NET_ADMIN
      - NET_RAW
    environment:
      - RELAY_ID=2
      - BROADCAST_PORT=1900
      - INTERFACES=br0.10,br0.20,br0.30
      - MULTICAST_GROUP=239.255.255.250
      - DEBUG=false
      - TZ=UTC
      - PUID=99
      - PGID=100
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pgrep", "udp-broadcast-relay-redux"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

  # Kasa smart home relay (port 9999)
  # Relays TP-Link Kasa device discovery broadcasts
  kasa-relay-9999:
    image: your-registry/udp-broadcast-relay-redux:latest
    network_mode: host
    cap_add:
      - NET_ADMIN
      - NET_RAW
    environment:
      - RELAY_ID=3
      - BROADCAST_PORT=9999
      - INTERFACES=br0.10,br0.20,br0.30
      - DEBUG=false
      - TZ=UTC
      - PUID=99
      - PGID=100
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pgrep", "udp-broadcast-relay-redux"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

  # Kasa smart home relay (port 20002)
  # Additional Kasa discovery port for some device types
  kasa-relay-20002:
    image: your-registry/udp-broadcast-relay-redux:latest
    network_mode: host
    cap_add:
      - NET_ADMIN
      - NET_RAW
    environment:
      - RELAY_ID=4
      - BROADCAST_PORT=20002
      - INTERFACES=br0.10,br0.20,br0.30
      - DEBUG=false
      - TZ=UTC
      - PUID=99
      - PGID=100
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pgrep", "udp-broadcast-relay-redux"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

# Configuration Notes:
#
# 1. RELAY_ID: Must be unique for each container (1-99)
#    - Prevents broadcast loops using TTL modification
#    - Each ID adds (ID + 64) to packet TTL for loop detection
#
# 2. INTERFACES: Comma-separated VLAN interfaces
#    - Broadcasts go to ALL listed interfaces
#    - For selective routing, use separate containers
#    - Common patterns: br0.X (Unraid), vlanX (pfSense), eth0.X (Linux)
#
# 3. BROADCAST_PORT: Device-specific UDP ports
#    - 65001: HDHomerun network tuners
#    - 1900: Roku/SSDP multicast discovery
#    - 9999/20002: TP-Link Kasa smart home
#
# 4. MULTICAST_GROUP: Optional for multicast protocols
#    - 239.255.255.250: SSDP multicast (Roku)
#    - Leave empty for broadcast-only protocols
#
# 5. Network Mode: Must be 'host' for multi-VLAN access
#    - Allows container to see all host network interfaces
#    - Required for VLAN trunking functionality
#
# 6. Capabilities: NET_ADMIN and NET_RAW required
#    - Allows raw socket operations for packet manipulation
#    - Enables interface binding and packet forwarding
#
# 7. Health Checks: Monitor relay process
#    - Ensures container stays running
#    - Automatic restart on process failure
#
# 8. PUID and PGID: User and Group ID settings
#    - PUID: Process User ID (default: 99 for 'nobody' in Unraid)
#    - PGID: Process Group ID (default: 100 for 'users' in Unraid)
#    - Used for file permissions when mounting host volumes
#
# Usage Examples:
#
# Start all relays:
#   docker compose up -d
#
# Start specific relay:
#   docker compose up -d hdhomerun-relay
#
# View logs:
#   docker compose logs -f hdhomerun-relay
#
# Stop all relays:
#   docker compose down
#
# Update images:
#   docker compose pull
#   docker compose up -d